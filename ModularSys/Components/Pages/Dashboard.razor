@page "/dashboard"
@using MudBlazor
@using ModularSys.Core.Interfaces
@using ModularSys.Core.Models
@using ModularSys.Data.Common.Interfaces.Sync

@inject NavigationManager Nav
@inject IDashboardService DashboardService
@inject IConnectionManager ConnectionManager

<PageTitle>Dashboard</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Dashboard</MudText>

    @if (_loading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
    }
    else
    {
        <!-- KPI Cards -->
        <MudGrid Spacing="3" Class="mb-4">
            <MudItem xs="12" sm="6" md="3">
                <MudCard>
                    <MudCardContent>
                        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <div>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">Total Users</MudText>
                                <MudText Typo="Typo.h5">@(_dashboardStats?.TotalUsers ?? 0)</MudText>
                            </div>
                            <MudIcon Icon="@Icons.Material.Filled.People" Size="Size.Large" Color="Color.Primary" />
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6" md="3">
                <MudCard>
                    <MudCardContent>
                        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <div>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">Active Users</MudText>
                                <MudText Typo="Typo.h5">@(_dashboardStats?.ActiveUsersToday ?? 0)</MudText>
                            </div>
                            <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Large" Color="Color.Success" />
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6" md="3">
                <MudCard>
                    <MudCardContent>
                        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <div>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">Departments</MudText>
                                <MudText Typo="Typo.h5">@(_dashboardStats?.TotalDepartments ?? 0)</MudText>
                            </div>
                            <MudIcon Icon="@Icons.Material.Filled.Business" Size="Size.Large" Color="Color.Info" />
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6" md="3">
                <MudCard>
                    <MudCardContent>
                        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <div>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">Total Roles</MudText>
                                <MudText Typo="Typo.h5">@(_dashboardStats?.TotalRoles ?? 0)</MudText>
                            </div>
                            <MudIcon Icon="@Icons.Material.Filled.AdminPanelSettings" Size="Size.Large" Color="Color.Warning" />
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        <!-- System Health -->
        <MudPaper Class="pa-4 mb-4">
            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-3">
                <MudText Typo="Typo.h6">System Health</MudText>
                <MudChip T="string" Color="@(_systemHealth?.IsHealthy == true ? Color.Success : Color.Error)" Size="Size.Small">
                    @(_systemHealth?.IsHealthy == true ? "Healthy" : "Issues")
                </MudChip>
            </MudStack>

            <MudGrid Spacing="2">
                <MudItem xs="12" sm="6" md="3">
                    <MudAlert Severity="@(_systemHealth?.IsDatabaseOnline == true ? Severity.Success : Severity.Error)" Dense="true">
                        <MudStack Spacing="1">
                            <MudText Typo="Typo.body2"><b>Database</b></MudText>
                            <MudText Typo="Typo.caption">
                                @if (_systemHealth?.IsDatabaseOnline == true)
                                {
                                    <text>@_systemHealth.DatabaseConnectionType</text>
                                }
                                else
                                {
                                    <text>Offline</text>
                                }
                            </MudText>
                            @if (!string.IsNullOrEmpty(_systemHealth?.DatabaseErrorMessage))
                            {
                                <MudText Typo="Typo.caption" Color="Color.Warning">@_systemHealth.DatabaseErrorMessage</MudText>
                            }
                        </MudStack>
                    </MudAlert>
                </MudItem>

                <MudItem xs="12" sm="6" md="3">
                    <MudAlert Severity="@(isCloudOnline ? Severity.Success : Severity.Warning)" Dense="true">
                        <MudStack Spacing="1">
                            <MudText Typo="Typo.body2"><b>Cloud Sync</b></MudText>
                            <MudText Typo="Typo.caption">@(isCloudOnline ? "Online" : "Offline")</MudText>
                        </MudStack>
                    </MudAlert>
                </MudItem>

                <MudItem xs="12" sm="6" md="3">
                    <MudAlert Severity="Severity.Info" Dense="true">
                        <MudStack Spacing="1">
                            <MudText Typo="Typo.body2"><b>Uptime</b></MudText>
                            <MudText Typo="Typo.caption">@(_systemHealth?.Uptime.Days ?? 0)d @(_systemHealth?.Uptime.Hours ?? 0)h @(_systemHealth?.Uptime.Minutes ?? 0)m</MudText>
                        </MudStack>
                    </MudAlert>
                </MudItem>

                <MudItem xs="12" sm="6" md="3">
                    <MudAlert Severity="Severity.Success" Dense="true">
                        <MudStack Spacing="1">
                            <MudText Typo="Typo.body2"><b>Last Backup</b></MudText>
                            <MudText Typo="Typo.caption">@(_systemHealth?.LastBackup.ToString("MMM dd, HH:mm") ?? "N/A")</MudText>
                        </MudStack>
                    </MudAlert>
                </MudItem>
            </MudGrid>
        </MudPaper>

        <!-- Security & Performance -->
        <MudGrid Spacing="3" Class="mb-4">
            <MudItem xs="12" md="6">
                <MudPaper Class="pa-4">
                    <MudText Typo="Typo.h6" Class="mb-3">Security Monitoring</MudText>
                    <MudGrid Spacing="2">
                        <MudItem xs="6">
                            <MudText Typo="Typo.caption" Color="Color.Secondary">Security Score</MudText>
                            <MudText Typo="Typo.h6" Color="@(_securityMetrics?.SecurityScore >= 90 ? Color.Success : Color.Warning)">
                                @(_securityMetrics?.SecurityScore.ToString("F1") ?? "0")%
                            </MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.caption" Color="Color.Secondary">Successful Logins</MudText>
                            <MudText Typo="Typo.h6">@(_securityMetrics?.SuccessfulLogins ?? 0)</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.caption" Color="Color.Secondary">Failed Attempts</MudText>
                            <MudText Typo="Typo.h6" Color="Color.Error">@(_securityMetrics?.FailedLoginAttempts ?? 0)</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.caption" Color="Color.Secondary">Suspicious Activity</MudText>
                            <MudText Typo="Typo.h6">@(_securityMetrics?.SuspiciousActivities ?? 0)</MudText>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>

            <MudItem xs="12" md="6">
                <MudPaper Class="pa-4">
                    <MudText Typo="Typo.h6" Class="mb-3">Performance Metrics</MudText>
                    <MudGrid Spacing="2">
                        <MudItem xs="6">
                            <MudText Typo="Typo.caption" Color="Color.Secondary">Avg Response Time</MudText>
                            <MudText Typo="Typo.h6">@(_performanceMetrics?.AverageResponseTime.ToString("F0") ?? "0")ms</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.caption" Color="Color.Secondary">Success Rate</MudText>
                            <MudText Typo="Typo.h6" Color="Color.Success">@(_performanceMetrics?.SuccessRate.ToString("F1") ?? "0")%</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.caption" Color="Color.Secondary">Total Requests</MudText>
                            <MudText Typo="Typo.h6">@(_performanceMetrics?.TotalRequests.ToString("N0") ?? "0")</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.caption" Color="Color.Secondary">Requests/Sec</MudText>
                            <MudText Typo="Typo.h6">@(_performanceMetrics?.RequestsPerSecond.ToString("F2") ?? "0")</MudText>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
        </MudGrid>

        <!-- Recent Activity -->
        <MudPaper Class="pa-4 mt-4">
            <MudText Typo="Typo.h6" Class="mb-3">Recent Activity</MudText>
            @if (_recentActivities?.Any() == true)
            {
                <MudList T="string" Dense="true">
                    @foreach (var activity in _recentActivities.Take(5))
                    {
                        <MudListItem T="string" Icon="@GetActivityIcon(activity.Icon)" IconColor="@GetActivityColor(activity.Color)">
                            <MudStack Spacing="0">
                                <MudText Typo="Typo.body2">@activity.Activity</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                    @activity.Description - @activity.Timestamp.ToString("MMM dd, HH:mm")
                                </MudText>
                            </MudStack>
                        </MudListItem>
                        <MudDivider />
                    }
                </MudList>
            }
            else
            {
                <MudText Typo="Typo.body2" Color="Color.Secondary" Align="Align.Center" Class="py-4">
                    No recent activity
                </MudText>
            }
        </MudPaper>
    }
</MudContainer>

@code {
    private DashboardStats? _dashboardStats;
    private SystemHealthStats? _systemHealth;
    private SecurityMetrics? _securityMetrics;
    private PerformanceMetrics? _performanceMetrics;
    private List<UserGrowthData> _userGrowthData = new();
    private List<DepartmentStats> _departmentStats = new();
    private List<RoleDistribution> _roleDistribution = new();
    private List<RecentActivity> _recentActivities = new();
    private bool _loading = true;
    private bool isCloudOnline = true;

    // Chart data
    private List<ChartSeries> _userGrowthSeries = new();
    private string[] _growthMonths = Array.Empty<string>();
    private List<ChartSeries> _departmentDistributionSeries = new();
    private string[] _departmentLabels = Array.Empty<string>();
    private List<ChartSeries> _roleDistributionSeries = new();
    private string[] _roleLabels = Array.Empty<string>();
    private List<ChartSeries> _userStatusSeries = new();
    private string[] _statusLabels = Array.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        // Check cloud status
        isCloudOnline = ConnectionManager.IsCloudAvailable();
        
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            _loading = true;

            // Load all dashboard data
            _dashboardStats = await DashboardService.GetDashboardStatsAsync();
            _systemHealth = await DashboardService.GetSystemHealthAsync();
            _securityMetrics = await DashboardService.GetSecurityMetricsAsync();
            _performanceMetrics = await DashboardService.GetPerformanceMetricsAsync();
            _userGrowthData = await DashboardService.GetUserGrowthDataAsync(6);
            _departmentStats = await DashboardService.GetDepartmentStatsAsync();
            _roleDistribution = await DashboardService.GetRoleDistributionAsync();
            _recentActivities = await DashboardService.GetRecentActivitiesAsync(5);

            // User Growth Chart
            _userGrowthSeries = new List<ChartSeries>
            {
                new ChartSeries { Name = "Users", Data = _userGrowthData.Select(u => (double)u.TotalUsers).ToArray() }
            };
            _growthMonths = _userGrowthData.Select(u => u.Month).ToArray();

            // Department Distribution
            _departmentDistributionSeries = new List<ChartSeries>
            {
                new ChartSeries { Name = "Users", Data = _departmentStats.Select(d => (double)d.UserCount).ToArray() }
            };
            _departmentLabels = _departmentStats.Select(d => d.DepartmentName).ToArray();

            // Role Distribution
            _roleDistributionSeries = new List<ChartSeries>
            {
                new ChartSeries { Name = "Users", Data = _roleDistribution.Select(r => (double)r.UserCount).ToArray() }
            };
            _roleLabels = _roleDistribution.Select(r => r.RoleName).ToArray();

            // User Status
            var totalUsers = _dashboardStats?.TotalUsers ?? 0;
            var activeUsers = _dashboardStats?.ActiveUsersToday ?? 0;
            _userStatusSeries = new List<ChartSeries>
            {
                new ChartSeries { Name = "Status", Data = new double[] { activeUsers, totalUsers - activeUsers } }
            };
            _statusLabels = new[] { "Active", "Inactive" };
        }
        catch
        {
            // Initialize empty data on error
            _dashboardStats = new DashboardStats();
            _systemHealth = new SystemHealthStats();
        }
        finally
        {
            _loading = false;
        }
    }

    private string GetActivityIcon(string iconName) => iconName switch
    {
        "PersonAdd" => Icons.Material.Filled.PersonAdd,
        "Edit" => Icons.Material.Filled.Edit,
        "PlayArrow" => Icons.Material.Filled.PlayArrow,
        "Delete" => Icons.Material.Filled.Delete,
        _ => Icons.Material.Filled.Info
    };

    private Color GetActivityColor(string colorName) => colorName switch
    {
        "Success" => Color.Success,
        "Info" => Color.Info,
        "Warning" => Color.Warning,
        "Error" => Color.Error,
        "Primary" => Color.Primary,
        _ => Color.Default
    };
}
