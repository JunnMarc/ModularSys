@page "/users"
@using ModularSys.Data.Common.Entities
@using ModularSys.Core.Interfaces
@using ModularSys.Core.Models
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject IUserService UserService
@inject IRoleService RoleService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthStateProvider
@inject IAuthService AuthService

<MudContainer MaxWidth="MaxWidth.False" Class="pa-4">
    <!-- Header -->
    <div class="d-flex justify-space-between align-center mb-4">
        <div>
            <MudText Typo="Typo.h4" Class="font-weight-bold">User Management</MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">Manage system users and their permissions</MudText>
        </div>
        <div class="d-flex gap-2">
            @if (HasPermission("Users.Delete"))
            {
                <MudButton Variant="Variant.Outlined" 
                           StartIcon="@Icons.Material.Filled.RestoreFromTrash"
                           OnClick="@(() => ToggleDeletedView())"
                           Color="@(_showDeleted ? Color.Warning : Color.Default)">
                    @(_showDeleted ? "Hide Deleted" : "Show Deleted")
                </MudButton>
            }
            @if (HasPermission("Users.Create"))
            {
                <MudButton Variant="Variant.Filled" 
                           StartIcon="@Icons.Material.Filled.Add"
                           Color="Color.Primary"
                           OnClick="CreateUser">
                    Add User
                </MudButton>
            }
        </div>
    </div>

    <!-- Search and Filters -->
    <MudPaper Class="pa-4 mb-4" Elevation="1">
        <MudGrid Spacing="2" AlignItems="Center">
            <MudItem xs="12" sm="6" md="4">
                <MudTextField @bind-Value="_searchModel.SearchTerm"
                              Placeholder="Search users..."
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              OnKeyUp="@(async (e) => { if (e.Key == "Enter") await SearchUsers(); })"
                              Clearable="true" />
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudSelect T="int?" @bind-Value="_searchModel.RoleId" 
                           Label="Filter by Role" 
                           Clearable="true">
                    @if (_roles != null)
                    {
                        @foreach (var role in _roles)
                        {
                            <MudSelectItem T="int?" Value="role.RoleId">@role.RoleName</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudSelect T="int" @bind-Value="_searchModel.PageSize" Label="Page Size">
                    <MudSelectItem T="int" Value="10">10</MudSelectItem>
                    <MudSelectItem T="int" Value="25">25</MudSelectItem>
                    <MudSelectItem T="int" Value="50">50</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6" md="2">
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Primary" 
                           OnClick="SearchUsers"
                           FullWidth="true">
                    Search
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <!-- Users Table -->
    <MudPaper Elevation="1">
        <MudTable T="User" 
                  Items="_users" 
                  Loading="_loading"
                  Hover="true"
                  Striped="true"
                  FixedHeader="true"
                  Height="600px">
            <HeaderContent>
                <MudTh>User</MudTh>
                <MudTh>Role</MudTh>
                <MudTh>Department</MudTh>
                <MudTh>Created</MudTh>
                @if (_showDeleted)
                {
                    <MudTh>Status</MudTh>
                }
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <div class="d-flex align-center">
                        <MudAvatar Size="Size.Small" Color="Color.Primary" Class="mr-2">
                            @context.FirstName.Substring(0, 1).ToUpper()@context.LastName.Substring(0, 1).ToUpper()
                        </MudAvatar>
                        <div>
                            <MudText Typo="Typo.body2" Class="font-weight-medium">@context.FirstName @context.LastName</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Secondary">@context.Username</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Secondary">@context.Email</MudText>
                        </div>
                    </div>
                </MudTd>
                <MudTd>
                    <MudChip T="string" Color="Color.Primary" Size="Size.Small" Variant="Variant.Outlined">
                        @context.Role?.RoleName
                    </MudChip>
                </MudTd>
                <MudTd>@context.Department?.DepartmentName</MudTd>
                <MudTd>
                    <MudText Typo="Typo.body2">@context.CreatedAt.ToString("MMM dd, yyyy")</MudText>
                    <MudText Typo="Typo.caption" Color="Color.Secondary">@context.CreatedAt.ToString("HH:mm")</MudText>
                </MudTd>
                @if (_showDeleted)
                {
                    <MudTd>
                        @if (context.IsDeleted)
                        {
                            <MudChip T="string" Color="Color.Error" Size="Size.Small">Deleted</MudChip>
                        }
                        else
                        {
                            <MudChip T="string" Color="Color.Success" Size="Size.Small">Active</MudChip>
                        }
                    </MudTd>
                }
                <MudTd>
                    <div class="d-flex gap-1">
                        @if (CanEditUser(context))
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                           Color="Color.Primary" 
                                           Size="Size.Small"
                                           OnClick="@(() => EditUser(context.Id))" />
                        }
                        
                        @if (context.IsDeleted && CanRestoreUser())
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Restore" 
                                           Color="Color.Success" 
                                           Size="Size.Small"
                                           OnClick="@(() => RestoreUser(context.Id))" />
                        }
                        else if (!context.IsDeleted && CanDeleteUser(context))
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                           Color="Color.Error" 
                                           Size="Size.Small"
                                           OnClick="@(() => DeleteUser(context.Id))" 
                                           Disabled="@IsCurrentUser(context)" />
                        }
                        
                        @if (IsCurrentUser(context) && !context.IsDeleted)
                        {
                            <MudTooltip Text="You cannot delete your own account">
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                               Color="Color.Default" 
                                               Size="Size.Small"
                                               Disabled="true" />
                            </MudTooltip>
                        }
                    </div>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>
</MudContainer>

@code {

    private List<User> _users = new();
    private List<Role>? _roles;
    private UserSearchModel _searchModel = new();
    private bool _loading = true;
    private bool _showDeleted = false;
    private int _totalCount = 0;
    private string? _currentUsername;
    private ClaimsPrincipal? _currentUser;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        _currentUser = authState.User;
        _currentUsername = _currentUser?.Identity?.Name;
        
        await LoadRoles();
        await LoadUsers();
    }
    
    // Permission check methods
    private bool IsCurrentUser(User user)
    {
        return user.Username.Equals(_currentUsername, StringComparison.OrdinalIgnoreCase);
    }
    
    private bool HasPermission(string permissionName)
    {
        return _currentUser?.HasClaim("Permission", permissionName) ?? false;
    }
    
    private bool CanEditUser(User user)
    {
        // Can edit if has permission OR editing own profile
        return HasPermission("Users.Edit") || IsCurrentUser(user);
    }
    
    private bool CanDeleteUser(User user)
    {
        // Cannot delete yourself, must have permission
        if (IsCurrentUser(user)) return false;
        return HasPermission("Users.Delete");
    }
    
    private bool CanRestoreUser()
    {
        return HasPermission("Users.Delete"); // Same permission as delete
    }
    
    private bool CanCreateUser()
    {
        return HasPermission("Users.Create");
    }

    private async Task LoadRoles()
    {
        _roles = await RoleService.GetAllAsync();
    }

    private async Task LoadUsers()
    {
        _loading = true;
        try
        {
            if (_showDeleted)
            {
                _users = await UserService.GetDeletedUsersAsync();
            }
            else
            {
                var result = await UserService.GetPagedAsync(_searchModel.Page, _searchModel.PageSize, _searchModel.SearchTerm);
                _users = result.Users;
                _totalCount = result.TotalCount;
            }
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task SearchUsers()
    {
        _searchModel.Page = 1; // Reset to first page
        await LoadUsers();
    }

    private async Task ToggleDeletedView()
    {
        _showDeleted = !_showDeleted;
        await LoadUsers();
    }

    private void CreateUser()
    {
        Nav.NavigateTo("/users/create");
    }

    private void EditUser(int id)
    {
        Nav.NavigateTo($"/users/edit/{id}");
    }

    private async Task DeleteUser(int id)
    {
        // Get user to check if it's current user
        var userToDelete = await UserService.GetByIdAsync(id);
        if (userToDelete == null)
        {
            Snackbar.Add("User not found", Severity.Error);
            return;
        }
        
        // Prevent self-deletion
        if (IsCurrentUser(userToDelete))
        {
            Snackbar.Add("You cannot delete your own account", Severity.Warning);
            return;
        }
        
        // Check permission
        if (!HasPermission("Users.Delete"))
        {
            Snackbar.Add("You don't have permission to delete users", Severity.Error);
            return;
        }
        
        var result = await DialogService.ShowMessageBox(
            "Confirm Delete",
            $"Are you sure you want to delete {userToDelete.FirstName} {userToDelete.LastName}? This action can be undone later.",
            yesText: "Delete", cancelText: "Cancel");

        if (result == true)
        {
            var success = await UserService.DeleteAsync(id);
            if (success)
            {
                Snackbar.Add("User deleted successfully", Severity.Success);
                await LoadUsers();
            }
            else
            {
                Snackbar.Add("Failed to delete user", Severity.Error);
            }
        }
    }



    private async Task RestoreUser(int id)

    {

        var result = await DialogService.ShowMessageBox(

            "Confirm Restore",

            "Are you sure you want to restore this user?",

            yesText: "Restore", cancelText: "Cancel");



        if (result == true)

        {

            var success = await UserService.RestoreAsync(id);

            if (success)

            {

                Snackbar.Add("User restored successfully", Severity.Success);

                await LoadUsers();

            }

            else

            {

                Snackbar.Add("Failed to restore user", Severity.Error);

            }

        }
    }
}
