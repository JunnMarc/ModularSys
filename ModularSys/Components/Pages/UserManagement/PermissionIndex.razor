@page "/permissions"
@using Microsoft.Maui.Layouts
@using ModularSys.Core.Interfaces
@using ModularSys.Core.Services
@using ModularSys.Data.Common.Entities
@inject IRolePermissionService RolePermissionService
@inject IRoleService RoleService
@inject IPermissionService PermissionService
@inject IAuthService AuthService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.False" Class="pa-4">
    <!-- Enhanced Header -->
    <MudPaper Class="pa-4 mb-4" Elevation="0" Style="background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%); border-radius: 12px;">
        <MudStack Spacing="3">
            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                <MudStack Spacing="1">
                    <MudText Typo="Typo.h4" Class="font-weight-bold" Style="color: white;">
                        <MudIcon Icon="@Icons.Material.Filled.Security" Class="mr-2" />
                        Permission Matrix
                    </MudText>
                    <MudText Typo="Typo.body2" Style="color: rgba(255,255,255,0.9);">
                        Manage role-permission assignments with real-time updates
                    </MudText>
                </MudStack>
                <MudChip T="string" Color="Color.Surface" Size="Size.Medium" Style="font-weight: 600;">
                    @($"{FilteredRoles.Count} roles â€¢ {FilteredPermissions.Count} permissions")
                </MudChip>
            </MudStack>
            
            <!-- Quick Stats -->
            <MudGrid Spacing="2">
                <MudItem xs="3">
                    <MudPaper Class="pa-3" Style="background: rgba(255,255,255,0.15); backdrop-filter: blur(10px); border-radius: 8px;">
                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                            <MudAvatar Color="Color.Surface" Size="Size.Medium">
                                <MudIcon Icon="@Icons.Material.Filled.Group" />
                            </MudAvatar>
                            <MudStack Spacing="0">
                                <MudText Typo="Typo.h6" Style="color: white;">@roles.Count</MudText>
                                <MudText Typo="Typo.caption" Style="color: rgba(255,255,255,0.8);">Total Roles</MudText>
                            </MudStack>
                        </MudStack>
                    </MudPaper>
                </MudItem>
                <MudItem xs="3">
                    <MudPaper Class="pa-3" Style="background: rgba(255,255,255,0.15); backdrop-filter: blur(10px); border-radius: 8px;">
                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                            <MudAvatar Color="Color.Surface" Size="Size.Medium">
                                <MudIcon Icon="@Icons.Material.Filled.Lock" />
                            </MudAvatar>
                            <MudStack Spacing="0">
                                <MudText Typo="Typo.h6" Style="color: white;">@permissions.Count</MudText>
                                <MudText Typo="Typo.caption" Style="color: rgba(255,255,255,0.8);">Permissions</MudText>
                            </MudStack>
                        </MudStack>
                    </MudPaper>
                </MudItem>
                <MudItem xs="3">
                    <MudPaper Class="pa-3" Style="background: rgba(255,255,255,0.15); backdrop-filter: blur(10px); border-radius: 8px;">
                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                            <MudAvatar Color="Color.Surface" Size="Size.Medium">
                                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" />
                            </MudAvatar>
                            <MudStack Spacing="0">
                                <MudText Typo="Typo.h6" Style="color: white;">@GetActiveAssignmentsCount()</MudText>
                                <MudText Typo="Typo.caption" Style="color: rgba(255,255,255,0.8);">Active</MudText>
                            </MudStack>
                        </MudStack>
                    </MudPaper>
                </MudItem>
                <MudItem xs="3">
                    <MudPaper Class="pa-3" Style="background: rgba(255,255,255,0.15); backdrop-filter: blur(10px); border-radius: 8px;">
                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                            <MudAvatar Color="Color.Surface" Size="Size.Medium">
                                <MudIcon Icon="@Icons.Material.Filled.Percent" />
                            </MudAvatar>
                            <MudStack Spacing="0">
                                <MudText Typo="Typo.h6" Style="color: white;">@GetCoveragePercentage()%</MudText>
                                <MudText Typo="Typo.caption" Style="color: rgba(255,255,255,0.8);">Coverage</MudText>
                            </MudStack>
                        </MudStack>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudStack>
    </MudPaper>
    
    <!-- Filters Section -->
    <MudPaper Class="pa-4 mb-4" Elevation="2" Style="border-radius: 12px;">
        <MudStack Spacing="3">

        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-3">
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.FilterList" Class="mr-2" Color="Color.Primary" />
                Filters & Search
            </MudText>
            <MudStack Row="true" Spacing="2">
                <MudButton Variant="Variant.Text" 
                           StartIcon="@Icons.Material.Filled.SelectAll"
                           OnClick="GrantAllVisible"
                           Disabled="@isBusy"
                           Color="Color.Success"
                           Size="Size.Small">
                    Grant All Visible
                </MudButton>
                <MudButton Variant="Variant.Text" 
                           StartIcon="@Icons.Material.Filled.ClearAll"
                           OnClick="RevokeAllVisible"
                           Disabled="@isBusy"
                           Color="Color.Error"
                           Size="Size.Small">
                    Revoke All Visible
                </MudButton>
            </MudStack>
        </MudStack>
        
        <MudGrid Spacing="2">
            <MudItem xs="12" sm="4">
                <MudTextField @bind-Value="roleFilter" 
                              Label="Filter roles" 
                              Variant="Variant.Outlined"
                              Adornment="Adornment.Start" 
                              AdornmentIcon="@Icons.Material.Filled.ManageAccounts"
                              Immediate="true" 
                              DebounceInterval="200"
                              Clearable="true" />
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudTextField @bind-Value="permissionFilter" 
                              Label="Filter permissions" 
                              Variant="Variant.Outlined"
                              Adornment="Adornment.Start" 
                              AdornmentIcon="@Icons.Material.Filled.Lock"
                              Immediate="true" 
                              DebounceInterval="200"
                              Clearable="true" />
            </MudItem>
            <MudItem xs="12" sm="4" Class="d-flex align-center gap-2">
                <MudButton Variant="Variant.Outlined" 
                           OnClick="ClearFilters"
                           StartIcon="@Icons.Material.Filled.Clear"
                           Disabled="@(string.IsNullOrWhiteSpace(roleFilter) && string.IsNullOrWhiteSpace(permissionFilter))">
                    Clear Filters
                </MudButton>
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Refresh"
                           OnClick="RefreshMatrix"
                           Disabled="@isLoading">
                    Refresh
                </MudButton>
            </MudItem>
        </MudGrid>
        </MudStack>
    </MudPaper>
    
    <!-- Matrix Section -->
    <MudPaper Class="pa-4" Elevation="2" Style="border-radius: 12px;">
        <MudStack Spacing="2">

        @if (isLoading)
        {
            <MudStack AlignItems="AlignItems.Center" JustifyContent="Center" Class="py-6">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" />
            </MudStack>
        }
        else if (!roles.Any() || !permissions.Any())
        {
            <MudAlert Severity="Severity.Info" Variant="Variant.Outlined">
                No roles or permissions found. Add some to get started.
            </MudAlert>
        }
        else
        {
            <div class="matrix-container">
                <MudTable Items="@FilteredRoles" Bordered="true" Striped="true" Elevation="0" Dense="true" Style="border-radius: 8px; overflow: hidden;">
                    <HeaderContent>
                        <MudTh Class="sticky-first" Style="background: #f8fafc; font-weight: 600;">
                            <MudStack Direction="Row" Spacing="1" AlignItems="AlignItems.Center">
                                <MudIcon Icon="@Icons.Material.Filled.Group" Size="Size.Small" Color="Color.Primary" />
                                <MudText Typo="Typo.subtitle2" Class="font-weight-bold">Role</MudText>
                            </MudStack>
                        </MudTh>
                        @foreach (var perm in FilteredPermissions)
                        {
                            <MudTh Class="sticky-header" Style="background: #f8fafc; min-width: 120px;">
                                <MudStack Spacing="1" AlignItems="AlignItems.Center">
                                    <MudTooltip Text="@perm.Description">
                                        <MudStack Spacing="0" AlignItems="AlignItems.Center">
                                            <MudIcon Icon="@GetPermissionIcon(perm.PermissionName)" Size="Size.Small" Color="@GetPermissionColor(perm.Category)" />
                                            <MudText Typo="Typo.caption" Align="Align.Center" Class="font-weight-medium" Style="writing-mode: vertical-rl; text-orientation: mixed; white-space: nowrap;">
                                                @GetShortPermissionName(perm.PermissionName)
                                            </MudText>
                                        </MudStack>
                                    </MudTooltip>
                                    <MudStack Direction="Row" Spacing="1" JustifyContent="Center">
                                        <MudIconButton Icon="@Icons.Material.Filled.DoneAll"
                                                       Size="Size.Small"
                                                       Disabled="@isBusy"
                                                       Color="Color.Success"
                                                       Title="Grant all for this permission"
                                                       OnClick="@(() => SetPermissionForAllRoles(perm.PermissionId, true))" />
                                        <MudIconButton Icon="@Icons.Material.Filled.Block"
                                                       Size="Size.Small"
                                                       Disabled="@isBusy"
                                                       Color="Color.Error"
                                                       Title="Revoke all for this permission"
                                                       OnClick="@(() => SetPermissionForAllRoles(perm.PermissionId, false))" />
                                    </MudStack>
                                </MudStack>
                            </MudTh>
                        }
                    </HeaderContent>

                    <RowTemplate>
                        <MudTd Class="sticky-first" Style="background: #f8fafc; min-width: 200px;">
                            <MudStack Direction="Row" Spacing="2" AlignItems="AlignItems.Center">
                                <MudAvatar Color="@GetRoleColor(context.RoleName)" Size="Size.Small">
                                    <MudIcon Icon="@GetRoleIcon(context.RoleName)" Size="Size.Small" />
                                </MudAvatar>
                                <MudStack Spacing="0">
                                    <MudText Typo="Typo.body2" Class="font-weight-medium">
                                        @context.RoleName
                                    </MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        @GetActivePermissionsCount(context.RoleId) permissions
                                    </MudText>
                                </MudStack>
                                <MudStack Direction="Row" Spacing="1">
                                    <MudIconButton Icon="@Icons.Material.Filled.DoneAll"
                                                   Size="Size.Small"
                                                   Disabled="@isBusy"
                                                   Color="Color.Success"
                                                   Title="Grant all for this role"
                                                   OnClick="@(() => SetAllPermissionsForRole(context.RoleId, true))" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Block"
                                                   Size="Size.Small"
                                                   Disabled="@isBusy"
                                                   Color="Color.Error"
                                                   Title="Revoke all for this role"
                                                   OnClick="@(() => SetAllPermissionsForRole(context.RoleId, false))" />
                                </MudStack>
                            </MudStack>
                        </MudTd>

                        @foreach (var perm in FilteredPermissions)
                        {
                            <MudTd Style="text-align: center; vertical-align: middle;">
                                <MudCheckBox T="bool"
                                             Value="@permissionMatrix[context.RoleId][perm.PermissionId]"
                                             ValueChanged="@(value => OnPermissionChanged(context.RoleId, perm.PermissionId, value))"
                                             Color="Color.Success"
                                             DisableRipple="true"
                                             Disabled="@isBusy"
                                             Size="Size.Medium"
                                             AriaLabel="@($"{context.RoleName} â€” {perm.PermissionName}")" />
                            </MudTd>
                        }
                    </RowTemplate>
                </MudTable>
            </div>
        }
    </MudStack>
</MudPaper>
</MudContainer>

<style>
    .matrix-container {
        overflow: auto;
    }
{{ ... }}
    .sticky-header {
        position: sticky;
        top: 0;
        background: var(--mud-palette-surface);
        z-index: 1;
    }

    .sticky-first {
        position: sticky;
        left: 0;
        background: var(--mud-palette-surface);
        z-index: 2;
    }

    .mw-250 {
        max-width: 250px;
    }
</style>

@code {
    // Data
    private List<Role> roles = new();
    private List<Permission> permissions = new();

    // Filters
    private string roleFilter = string.Empty;
    private string permissionFilter = string.Empty;

    // Matrix: RoleId â†’ PermissionId â†’ bool
    private readonly Dictionary<int, Dictionary<int, bool>> permissionMatrix = new();

    // UI State
    private bool isLoading = true;
    private bool isBusy = false; // disables controls during bulk/async ops

    // Computed
    private List<Role> FilteredRoles =>
        string.IsNullOrWhiteSpace(roleFilter)
            ? roles
            : roles.Where(r => r.RoleName.Contains(roleFilter, StringComparison.OrdinalIgnoreCase)).ToList();

    private List<Permission> FilteredPermissions =>
        string.IsNullOrWhiteSpace(permissionFilter)
            ? permissions
            : permissions.Where(p => p.PermissionName.Contains(permissionFilter, StringComparison.OrdinalIgnoreCase)
                                  || (!string.IsNullOrWhiteSpace(p.Description) && p.Description.Contains(permissionFilter, StringComparison.OrdinalIgnoreCase)))
                         .ToList();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;

            // Load all roles and all permissions from their own sources
            roles = await RoleService.GetAllAsync(); // from Roles table
            permissions = await PermissionService.GetAllAsync(); // from Permissions table

            // Load existing role-permission links
            var rolePermissions = await RolePermissionService.GetAllAsync();

            // Initialize matrix with default false
            foreach (var role in roles)
            {
                permissionMatrix[role.RoleId] = new Dictionary<int, bool>();

                foreach (var perm in permissions)
                {
                    bool hasPermission = rolePermissions.Any(rp =>
                        rp.RoleId == role.RoleId &&
                        rp.PermissionId == perm.PermissionId);

                    permissionMatrix[role.RoleId][perm.PermissionId] = hasPermission;
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load permissions: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }


    private void ClearFilters()
    {
        roleFilter = string.Empty;
        permissionFilter = string.Empty;
    }

    private async Task OnPermissionChanged(int roleId, int permissionId, bool isGranted)
    {
        var previous = permissionMatrix[roleId][permissionId];
        permissionMatrix[roleId][permissionId] = isGranted;

        try
        {
            await RolePermissionService.ToggleAsync(roleId, permissionId, isGranted);
            Snackbar.Add($"Permission {(isGranted ? "granted" : "revoked")} â€¢ Role #{roleId}, Permission #{permissionId}", Severity.Success);

            // Defer claim refresh to avoid render conflict
            _ = InvokeAsync(async () =>
            {
                await Task.Delay(100); // let UI settle
                await AuthService.RefreshClaimsAsync();
            });
        }
        catch (Exception ex)
        {
            permissionMatrix[roleId][permissionId] = previous;
            Snackbar.Add($"Error updating permission: {ex.Message}", Severity.Error);
        }

        StateHasChanged();
    }


    private async Task SetAllPermissionsForRole(int roleId, bool grant)
    {
        if (!permissionMatrix.TryGetValue(roleId, out var row)) return;

        isBusy = true;
        StateHasChanged();

        // Optimistic row update
        var previous = row.ToDictionary(kv => kv.Key, kv => kv.Value);
        try
        {
            foreach (var permId in FilteredPermissions.Select(p => p.PermissionId))
            {
                if (row[permId] == grant) continue;
                row[permId] = grant;
                await RolePermissionService.ToggleAsync(roleId, permId, grant);
            }
            Snackbar.Add($"{(grant ? "Granted" : "Revoked")} all for the role.", Severity.Info);
        }
        catch (Exception ex)
        {
            // rollback
            foreach (var kv in previous) row[kv.Key] = kv.Value;
            Snackbar.Add($"Bulk update failed: {ex.Message}", Severity.Error);
        }
        finally
            { isBusy = false; StateHasChanged(); }
    }

    private async Task SetPermissionForAllRoles(int permissionId, bool grant)
    {
        isBusy = true;
        StateHasChanged();

        // Optimistic column update
        var prev = new Dictionary<int, bool>();
        foreach (var role in FilteredRoles)
            prev[role.RoleId] = permissionMatrix[role.RoleId][permissionId];

        try
        {
            foreach (var role in FilteredRoles)
            {
                var current = permissionMatrix[role.RoleId][permissionId];
                if (current == grant) continue;
                permissionMatrix[role.RoleId][permissionId] = grant;
                await RolePermissionService.ToggleAsync(role.RoleId, permissionId, grant);
            }
            Snackbar.Add($"{(grant ? "Granted" : "Revoked")} for all roles on this permission.", Severity.Info);
        }
        catch (Exception ex)
        {
            foreach (var role in FilteredRoles)
                permissionMatrix[role.RoleId][permissionId] = prev[role.RoleId];
            Snackbar.Add($"Bulk update failed: {ex.Message}", Severity.Error);
        }
        finally
            { isBusy = false; StateHasChanged(); }
    }

    // Helper methods for the enhanced UI
    private int GetActiveAssignmentsCount()
    {
        return permissionMatrix.Values.SelectMany(row => row.Values).Count(granted => granted);
    }

    private int GetCoveragePercentage()
    {
        if (roles.Count == 0 || permissions.Count == 0) return 0;
        var totalPossible = roles.Count * permissions.Count;
        var assigned = GetActiveAssignmentsCount();
        return (int)Math.Round((double)assigned / totalPossible * 100);
    }

    private int GetActivePermissionsCount(int roleId)
    {
        if (!permissionMatrix.TryGetValue(roleId, out var row)) return 0;
        return row.Values.Count(granted => granted);
    }

    private Color GetRoleColor(string roleName) => roleName.ToLower() switch
    {
        var name when name.Contains("super") => Color.Error,
        var name when name.Contains("admin") => Color.Warning,
        var name when name.Contains("manager") => Color.Info,
        var name when name.Contains("user") => Color.Primary,
        var name when name.Contains("read") => Color.Secondary,
        _ => Color.Primary
    };

    private string GetRoleIcon(string roleName) => roleName.ToLower() switch
    {
        var name when name.Contains("super") => Icons.Material.Filled.Shield,
        var name when name.Contains("admin") => Icons.Material.Filled.AdminPanelSettings,
        var name when name.Contains("manager") => Icons.Material.Filled.ManageAccounts,
        var name when name.Contains("user") => Icons.Material.Filled.Person,
        var name when name.Contains("read") => Icons.Material.Filled.Visibility,
        _ => Icons.Material.Filled.Group
    };

    private Color GetPermissionColor(string category) => category switch
    {
        "User Management" => Color.Primary,
        "Role & Permission Management" => Color.Warning,
        "Department Management" => Color.Info,
        "System Administration" => Color.Error,
        "Dashboard & Reports" => Color.Success,
        "Inventory Management" => Color.Secondary,
        _ => Color.Default
    };

    private string GetPermissionIcon(string permissionName) => permissionName.ToLower() switch
    {
        var p when p.Contains("view") => Icons.Material.Filled.Visibility,
        var p when p.Contains("create") => Icons.Material.Filled.Add,
        var p when p.Contains("edit") => Icons.Material.Filled.Edit,
        var p when p.Contains("delete") => Icons.Material.Filled.Delete,
        var p when p.Contains("export") => Icons.Material.Filled.Download,
        var p when p.Contains("import") => Icons.Material.Filled.Upload,
        var p when p.Contains("manage") => Icons.Material.Filled.Settings,
        var p when p.Contains("dashboard") => Icons.Material.Filled.Dashboard,
        var p when p.Contains("reports") => Icons.Material.Filled.Assessment,
        var p when p.Contains("system") => Icons.Material.Filled.AdminPanelSettings,
        var p when p.Contains("audit") => Icons.Material.Filled.History,
        var p when p.Contains("backup") => Icons.Material.Filled.Backup,
        _ => Icons.Material.Filled.Lock
    };

    private string GetShortPermissionName(string permissionName)
    {
        // Convert "Users.Create" to "Create"
        var parts = permissionName.Split('.');
        return parts.Length > 1 ? parts[1] : permissionName;
    }

    private async Task GrantAllVisible()
    {
        isBusy = true;
        StateHasChanged();

        try
        {
            foreach (var role in FilteredRoles)
            {
                foreach (var perm in FilteredPermissions)
                {
                    if (!permissionMatrix[role.RoleId][perm.PermissionId])
                    {
                        permissionMatrix[role.RoleId][perm.PermissionId] = true;
                        await RolePermissionService.ToggleAsync(role.RoleId, perm.PermissionId, true);
                    }
                }
            }
            Snackbar.Add("Granted all visible permissions", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error granting permissions: {ex.Message}", Severity.Error);
        }
        finally
        {
            isBusy = false;
            StateHasChanged();
        }
    }

    private async Task RevokeAllVisible()
    {
        isBusy = true;
        StateHasChanged();

        try
        {
            foreach (var role in FilteredRoles)
            {
                foreach (var perm in FilteredPermissions)
                {
                    if (permissionMatrix[role.RoleId][perm.PermissionId])
                    {
                        permissionMatrix[role.RoleId][perm.PermissionId] = false;
                        await RolePermissionService.ToggleAsync(role.RoleId, perm.PermissionId, false);
                    }
                }
            }
            Snackbar.Add("Revoked all visible permissions", Severity.Warning);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error revoking permissions: {ex.Message}", Severity.Error);
        }
        finally
        {
            isBusy = false;
            StateHasChanged();
        }
    }

    private async Task RefreshMatrix()
    {
        await OnInitializedAsync();
        Snackbar.Add("Permission matrix refreshed", Severity.Info);
    }
}
