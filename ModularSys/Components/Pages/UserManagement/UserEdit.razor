@page "/users/edit/{Id:int}"
@using Microsoft.EntityFrameworkCore
@using ModularSys.Data.Common.Db
@using ModularSys.Data.Common.Entities
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject ModularSysDbContext Db

<MudPaper Class="pa-4">
    @if (user is not null)
    {
        <MudForm @ref="form">
            <MudTextField @bind-Value="user.Username" Label="Username" Required="true" />
            <MudTextField @bind-Value="user.Email" Label="Email" Required="true" />

            <MudSelect T="int" Label="Role" @bind-Value="user.RoleId">
                @foreach (var role in roles)
                {
                    <MudSelectItem Value="@role.RoleId">@role.RoleName</MudSelectItem>
                }
            </MudSelect>

            <MudSelect T="int" Label="Department" @bind-Value="user.DepartmentId">
                @foreach (var dept in departments)
                {
                    <MudSelectItem Value="@dept.DepartmentId">@dept.DepartmentName</MudSelectItem>
                }
            </MudSelect>

            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Save">Save</MudButton>
        </MudForm>
    }
    else
    {
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" />
    }

</MudPaper>

@code {
    [Parameter] public int Id { get; set; }

    private User user = null!;
    private List<Role> roles = new();
    private List<Department> departments = new();
    private MudForm form = null!;

    protected override async Task OnInitializedAsync()
    {
        roles = await Db.Roles.ToListAsync();
        departments = await Db.Departments.ToListAsync();

        var existingUser = await UserService.GetByIdAsync(Id);

        if (existingUser is not null)
        {
            user = existingUser;
        }
        else
        {
            var fallbackDeptId = departments.FirstOrDefault()?.DepartmentId
                ?? throw new InvalidOperationException("No departments available.");

            var fallbackRoleId = roles.FirstOrDefault()?.RoleId ?? 0;

            user = new User("NewUser", "new@user.com", fallbackDeptId)
            {
                RoleId = fallbackRoleId
            };
        }
    }



    private async Task Save()
    {
        await UserService.UpdateAsync(user);
        NavigationManager.NavigateTo("/users");
    }
}
