@page "/change-password"
@using ModularSys.Core.Interfaces
@inject IAuthService AuthService
@inject IUserService UserService
@inject ISnackbar Snackbar
@inject NavigationManager Nav

<PageTitle>Change Password</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-8">
    <MudPaper Class="pa-6">
        <MudStack Spacing="4">
            <div class="text-center">
                <MudIcon Icon="@Icons.Material.Filled.Lock" Size="Size.Large" Color="Color.Primary" Class="mb-2" />
                <MudText Typo="Typo.h5" Class="mb-2">Change Password</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary">Update your password to keep your account secure</MudText>
            </div>

            <MudDivider />

            <MudTextField @bind-Value="_currentPassword"
                          Label="Current Password"
                          InputType="InputType.Password"
                          Variant="Variant.Outlined"
                          Required="true"
                          Immediate="true" />

            <MudTextField @bind-Value="_newPassword"
                          Label="New Password"
                          InputType="InputType.Password"
                          Variant="Variant.Outlined"
                          Required="true"
                          Immediate="true"
                          HelperText="Minimum 12 characters" />

            <MudTextField @bind-Value="_confirmPassword"
                          Label="Confirm New Password"
                          InputType="InputType.Password"
                          Variant="Variant.Outlined"
                          Required="true"
                          Immediate="true" />

            <MudStack Row="true" Spacing="2" Justify="Justify.SpaceBetween">
                <MudButton Variant="Variant.Outlined" OnClick="Cancel">
                    Cancel
                </MudButton>
                <MudButton Color="Color.Primary" 
                          Variant="Variant.Filled" 
                          OnClick="SubmitPasswordChange" 
                          Disabled="_changingPassword">
                    @if (_changingPassword)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                    }
                    Change Password
                </MudButton>
            </MudStack>
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    private string _currentPassword = "";
    private string _newPassword = "";
    private string _confirmPassword = "";
    private bool _changingPassword = false;

    private void Cancel()
    {
        Nav.NavigateTo("/settings");
    }

    private async Task SubmitPasswordChange()
    {
        // Validation
        if (string.IsNullOrWhiteSpace(_currentPassword))
        {
            Snackbar.Add("Please enter your current password", Severity.Warning);
            return;
        }

        if (string.IsNullOrWhiteSpace(_newPassword))
        {
            Snackbar.Add("Please enter a new password", Severity.Warning);
            return;
        }

        if (_newPassword.Length < 12)
        {
            Snackbar.Add("Password must be at least 12 characters", Severity.Warning);
            return;
        }

        if (_newPassword != _confirmPassword)
        {
            Snackbar.Add("New passwords do not match", Severity.Error);
            return;
        }

        if (_currentPassword == _newPassword)
        {
            Snackbar.Add("New password must be different from current password", Severity.Warning);
            return;
        }

        try
        {
            _changingPassword = true;
            StateHasChanged();

            // Get current user
            var user = await UserService.GetByUsernameAsync(AuthService.CurrentUser ?? "");
            if (user == null)
            {
                Snackbar.Add("User not found", Severity.Error);
                return;
            }

            // Change password
            var success = await UserService.ChangePasswordAsync(user.Id, _currentPassword, _newPassword);

            if (success)
            {
                Snackbar.Add("Password changed successfully!", Severity.Success);
                
                // Clear fields
                _currentPassword = "";
                _newPassword = "";
                _confirmPassword = "";
                
                // Navigate back after short delay
                await Task.Delay(1500);
                Nav.NavigateTo("/settings");
            }
            else
            {
                Snackbar.Add("Current password is incorrect", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            _changingPassword = false;
            StateHasChanged();
        }
    }
}
