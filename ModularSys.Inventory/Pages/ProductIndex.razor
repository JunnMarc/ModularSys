@page "/products"
@using MudBlazor
@using ModularSys.Inventory.Interface
@using ModularSys.Data.Common.Entities.Inventory
@inject IProductService ProductService
@inject IDialogService DialogService

<MudStack Spacing="2" Class="h-100">
    <!-- Header Row -->
    <MudStack Row="true" AlignItems="@AlignItems.Center" Justify="@Justify.SpaceBetween">
        <MudText Typo="Typo.h6">Products</MudText>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.Add"
                   OnClick="CreateProduct">
            Add Product
        </MudButton>
    </MudStack>

    <!-- Scrollable Table Area -->
    <div style="flex:1; overflow:auto;">
        <MudTable Items="@_products" Hover="true" Dense="true" Class="w-100">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Category</MudTh>
                <MudTh align="right">Price</MudTh>
                <MudTh align="right">Stock</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Name</MudTd>
                <MudTd>@context.Category?.CategoryName</MudTd>
                <MudTd Align="Align.Right">@context.UnitPrice.ToString("C")</MudTd>
                <MudTd Align="Align.Right">@context.QuantityOnHand</MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                   Color="Color.Primary"
                                   Size="Size.Small"
                                   OnClick="@(() => EditProduct(context.ProductId))" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                   Color="Color.Error"
                                   Size="Size.Small"
                                   OnClick="@(() => ConfirmDelete(context.ProductId))" />
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText Color="Color.Secondary">No products found.</MudText>
            </NoRecordsContent>
        </MudTable>
    </div>
</MudStack>

@code {
    private List<Product> _products = new();

    protected override async Task OnInitializedAsync()
    {
        _products = (await ProductService.GetAllAsync()).ToList();
    }

    private async Task CreateProduct()
    {
        var dialog = DialogService.Show<ProductForm>(
            "Add Product",
            new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true }
        );

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            _products = (await ProductService.GetAllAsync()).ToList();
        }
    }

    private async Task EditProduct(int id)
    {
        var parameters = new DialogParameters { ["Id"] = id };

        var dialog = DialogService.Show<ProductForm>(
            "Edit Product",
            parameters,
            new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true }
        );

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            _products = (await ProductService.GetAllAsync()).ToList();
        }
    }

    private async Task ConfirmDelete(int id)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Confirm Delete",
            "Are you sure you want to delete this product?",
            yesText: "Delete", cancelText: "Cancel");

        if (result == true)
        {
            await ProductService.DeleteAsync(id);
            _products = (await ProductService.GetAllAsync()).ToList();
        }
    }
}
