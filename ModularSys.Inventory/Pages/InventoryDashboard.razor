@page "/inventory/dashboard"
@using ModularSys.Inventory.Interface
@using ModularSys.Data.Common.Entities.Inventory
@using MudBlazor
@inject IInventoryDashboardService DashboardService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.False" Class="pa-4">
    <MudStack Spacing="4">
        <!-- Header -->
        <MudStack Row="true" AlignItems="@AlignItems.Center" Justify="@Justify.SpaceBetween">
            <MudText Typo="Typo.h4" GutterBottom="false">
                <MudIcon Icon="@Icons.Material.Filled.Dashboard" Class="mr-2" />
                Inventory Dashboard
            </MudText>
            <MudButton Variant="Variant.Outlined" 
                      StartIcon="@Icons.Material.Filled.Refresh" 
                      OnClick="RefreshData"
                      Loading="_loading">
                Refresh
            </MudButton>
        </MudStack>

        @if (_loading)
        {
            <MudStack AlignItems="@AlignItems.Center" Class="pa-8">
                <MudProgressCircular Indeterminate="true" Size="Size.Large" />
                <MudText>Loading dashboard data...</MudText>
            </MudStack>
        }
        else if (_dashboardData != null)
        {
            <!-- KPI Cards Row -->
            <MudGrid>
                <MudItem xs="12" sm="6" md="3">
                    <MudCard Elevation="2" Class="pa-4">
                        <MudStack Row="true" AlignItems="@AlignItems.Center" Spacing="3">
                            <MudIcon Icon="@Icons.Material.Filled.Inventory" 
                                    Color="Color.Primary" Size="Size.Large" />
                            <MudStack Spacing="0">
                                <MudText Typo="Typo.h4">@_dashboardData.TotalProducts.ToString("N0")</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Total Products</MudText>
                            </MudStack>
                        </MudStack>
                    </MudCard>
                </MudItem>

                <MudItem xs="12" sm="6" md="3">
                    <MudCard Elevation="2" Class="pa-4">
                        <MudStack Row="true" AlignItems="@AlignItems.Center" Spacing="3">
                            <MudIcon Icon="@Icons.Material.Filled.AttachMoney" 
                                    Color="Color.Success" Size="Size.Large" />
                            <MudStack Spacing="0">
                                <MudText Typo="Typo.h4">@_dashboardData.TotalInventoryValue.ToString("C0")</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Inventory Value</MudText>
                            </MudStack>
                        </MudStack>
                    </MudCard>
                </MudItem>

                <MudItem xs="12" sm="6" md="3">
                    <MudCard Elevation="2" Class="pa-4">
                        <MudStack Row="true" AlignItems="@AlignItems.Center" Spacing="3">
                            <MudIcon Icon="@Icons.Material.Filled.Warning" 
                                    Color="Color.Warning" Size="Size.Large" />
                            <MudStack Spacing="0">
                                <MudText Typo="Typo.h4">@_dashboardData.LowStockCount.ToString("N0")</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Low Stock Items</MudText>
                            </MudStack>
                        </MudStack>
                    </MudCard>
                </MudItem>

                <MudItem xs="12" sm="6" md="3">
                    <MudCard Elevation="2" Class="pa-4">
                        <MudStack Row="true" AlignItems="@AlignItems.Center" Spacing="3">
                            <MudIcon Icon="@Icons.Material.Filled.TrendingUp" 
                                    Color="Color.Info" Size="Size.Large" />
                            <MudStack Spacing="0">
                                <MudText Typo="Typo.h4">@_dashboardData.ProfitMargin.ToString("F1")%</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Profit Margin</MudText>
                            </MudStack>
                        </MudStack>
                    </MudCard>
                </MudItem>
            </MudGrid>

            <!-- Stock Alerts Section -->
            @if (_stockAlerts?.Any() == true)
            {
                <MudCard Elevation="2" Class="pa-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="@Icons.Material.Filled.NotificationsActive" Class="mr-2" />
                                Stock Alerts (@_stockAlerts.Count())
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudStack Spacing="2">
                            @foreach (var alert in _stockAlerts.Take(5))
                            {
                                <MudAlert Severity="@GetAlertSeverity(alert.Severity)" 
                                         Variant="Variant.Outlined" 
                                         Dense="true">
                                    <MudStack Row="true" AlignItems="@AlignItems.Center" Justify="@Justify.SpaceBetween">
                                        <MudText>@alert.Message</MudText>
                                        <MudChip T="string" Size="Size.Small" Color="@GetAlertColor(alert.AlertType)">
                                            @alert.AlertType
                                        </MudChip>
                                    </MudStack>
                                </MudAlert>
                            }
                            @if (_stockAlerts.Count() > 5)
                            {
                                <MudText Typo="Typo.body2" Color="Color.Secondary" Align="Align.Center">
                                    And @(_stockAlerts.Count() - 5) more alerts...
                                </MudText>
                            }
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            }

            <!-- SIMPLIFIED: Key Summary Metrics Only -->
            <MudGrid>
                <MudItem xs="12" sm="6" md="4">
                    <MudCard Elevation="2" Class="pa-4">
                        <MudStack AlignItems="@AlignItems.Center" Spacing="2">
                            <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Color="Color.Success" Size="Size.Large" />
                            <MudText Typo="Typo.h4" Color="Color.Success">@_dashboardData.MonthlyRevenue.ToString("C0")</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Monthly Revenue</MudText>
                            <MudText Typo="Typo.caption" Color="@(_dashboardData.ProfitMargin >= 0 ? Color.Success : Color.Error)">
                                @_dashboardData.ProfitMargin.ToString("F1")% Profit Margin
                            </MudText>
                        </MudStack>
                    </MudCard>
                </MudItem>

                <MudItem xs="12" sm="6" md="4">
                    <MudCard Elevation="2" Class="pa-4">
                        <MudStack AlignItems="@AlignItems.Center" Spacing="2">
                            <MudIcon Icon="@Icons.Material.Filled.Inventory2" Color="Color.Primary" Size="Size.Large" />
                            <MudText Typo="Typo.h4" Color="Color.Primary">@_dashboardData.TotalInventoryValue.ToString("C0")</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Total Inventory Value</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                @_dashboardData.TotalProducts.ToString("N0") Products
                            </MudText>
                        </MudStack>
                    </MudCard>
                </MudItem>

                <MudItem xs="12" sm="6" md="4">
                    <MudCard Elevation="2" Class="pa-4">
                        <MudStack AlignItems="@AlignItems.Center" Spacing="2">
                            <MudIcon Icon="@Icons.Material.Filled.Assignment" Color="Color.Info" Size="Size.Large" />
                            <MudText Typo="Typo.h4" Color="Color.Info">@(_dashboardData.PendingSalesOrders + _dashboardData.PendingPurchaseOrders)</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Pending Orders</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                @_dashboardData.PendingSalesOrders SO â€¢ @_dashboardData.PendingPurchaseOrders PO
                            </MudText>
                        </MudStack>
                    </MudCard>
                </MudItem>
            </MudGrid>
        }
    </MudStack>
</MudContainer>

@code {
    private bool _loading = true;
    private InventoryDashboardData? _dashboardData;
    private IEnumerable<StockAlert>? _stockAlerts;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            _loading = true;
            StateHasChanged();

            // SIMPLIFIED: Load only essential dashboard data and stock alerts
            _dashboardData = await DashboardService.GetDashboardDataAsync();
            _stockAlerts = await DashboardService.GetStockAlertsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading dashboard data: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshData()
    {
        await LoadDashboardData();
        Snackbar.Add("Dashboard data refreshed", Severity.Success);
    }

    private Severity GetAlertSeverity(string severity) => severity switch
    {
        "Critical" => Severity.Error,
        "Error" => Severity.Error,
        "Warning" => Severity.Warning,
        _ => Severity.Info
    };

    private MudBlazor.Color GetAlertColor(string alertType) => alertType switch
    {
        "OutOfStock" => MudBlazor.Color.Error,
        "LowStock" => MudBlazor.Color.Warning,
        "Expiring" => MudBlazor.Color.Info,
        _ => MudBlazor.Color.Default
    };
}
