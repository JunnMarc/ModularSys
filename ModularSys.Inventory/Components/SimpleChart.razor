@using ModularSys.Inventory.Models
@using MudBlazor

<div class="modern-chart-container" style="height: @ChartConfig.Height;">
    @if (_isLoading)
    {
        <div class="chart-loading-overlay">
            <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
            <MudText Typo="Typo.body2" Class="mt-2" Style="color: #1976D2;">Loading chart data...</MudText>
        </div>
    }
    else if (ChartConfig.Data == null || !ChartConfig.Data.Any())
    {
        <div class="chart-no-data-overlay">
            <MudIcon Icon="@Icons.Material.Filled.BarChart" Size="Size.Large" Style="color: #9E9E9E;" />
            <MudText Typo="Typo.h6" Class="mt-2" Style="color: #9E9E9E;">No Data Available</MudText>
            <MudText Typo="Typo.body2" Style="color: #BDBDBD;">Chart data is not available for the selected period</MudText>
        </div>
    }
    else
    {
        @if (ChartConfig.ChartType.ToLower() == "bar")
        {
            <div class="bar-chart-container">
                @foreach (var (item, index) in ChartConfig.Data.Select((d, i) => (d, i)))
                {
                    <div class="bar-item">
                        <div class="bar-label">@item.Label</div>
                        <div class="bar-wrapper">
                            <div class="bar-fill" style="height: @(GetBarHeight(item.Value))%; background: @GetColor(index);"></div>
                            <div class="bar-value">@item.Value.ToString("N0")</div>
                        </div>
                    </div>
                }
            </div>
        }
        else if (ChartConfig.ChartType.ToLower() == "pie" || ChartConfig.ChartType.ToLower() == "doughnut")
        {
            <div class="pie-chart-container">
                <div class="pie-chart" style="background: @GetPieGradient();"></div>
                <div class="pie-legend">
                    @foreach (var (item, index) in ChartConfig.Data.Select((d, i) => (d, i)))
                    {
                        <div class="legend-item">
                            <div class="legend-color" style="background: @GetColor(index);"></div>
                            <span class="legend-label">@item.Label</span>
                            <span class="legend-value">@GetPercentage(item.Value)%</span>
                        </div>
                    }
                </div>
            </div>
        }
        else if (ChartConfig.ChartType.ToLower() == "line")
        {
            <div class="line-chart-container">
                <svg class="line-chart-svg" viewBox="0 0 400 250" preserveAspectRatio="xMidYMid meet">
                    <defs>
                        <linearGradient id="lineGradient" x1="0%" y1="0%" x2="0%" y2="100%">
                            <stop offset="0%" style="stop-color:#1976D2;stop-opacity:0.3" />
                            <stop offset="100%" style="stop-color:#1976D2;stop-opacity:0.05" />
                        </linearGradient>
                    </defs>
                    
                    <!-- Grid lines -->
                    @for (int i = 0; i <= 4; i++)
                    {
                        <line x1="50" y1="@(50 + i * 30)" x2="350" y2="@(50 + i * 30)" 
                              stroke="#E0E0E0" stroke-width="1" opacity="0.5"/>
                    }
                    
                    <!-- Y-axis -->
                    <line x1="50" y1="50" x2="50" y2="170" stroke="#E0E0E0" stroke-width="2"/>
                    <!-- X-axis -->
                    <line x1="50" y1="170" x2="350" y2="170" stroke="#E0E0E0" stroke-width="2"/>
                    
                    @{
                        var lineData = ChartConfig.Data.Take(6).ToList();
                        var maxVal = lineData.Any() ? lineData.Max(d => d.Value) : 1;
                        if (maxVal == 0) maxVal = 1; // Prevent division by zero
                        var points = new List<(double X, double Y)>();
                        
                        for (int i = 0; i < lineData.Count; i++)
                        {
                            var x = 70 + (i * 50); // Spread points across chart
                            var y = 170 - ((double)(lineData[i].Value / maxVal) * 100); // Scale to chart height
                            points.Add((x, y));
                        }
                    }
                    
                    <!-- Area fill -->
                    @if (points.Any())
                    {
                        var areaPath = $"M 50 170 L {points.First().X} {points.First().Y}";
                        foreach (var point in points.Skip(1))
                        {
                            areaPath += $" L {point.X} {point.Y}";
                        }
                        areaPath += " L 350 170 Z";
                        
                        <path d="@areaPath" fill="url(#lineGradient)" />
                    }
                    
                    <!-- Line path -->
                    @if (points.Any())
                    {
                        var linePath = $"M {points.First().X} {points.First().Y}";
                        foreach (var point in points.Skip(1))
                        {
                            linePath += $" L {point.X} {point.Y}";
                        }
                        
                        <path d="@linePath" fill="none" stroke="#1976D2" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" />
                    }
                    
                    <!-- Data points -->
                    @foreach (var point in points)
                    {
                        <circle cx="@point.X" cy="@point.Y" r="5" fill="#1976D2" stroke="#fff" stroke-width="2"/>
                    }
                    
                </svg>
            </div>
        }
    }
</div>

<style>
    .modern-chart-container {
        position: relative;
        background: linear-gradient(135deg, #FFFFFF 0%, #FAFBFF 100%);
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(25, 118, 210, 0.08);
        padding: 20px;
    }

    .chart-loading-overlay, .chart-no-data-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(4px);
        z-index: 10;
    }

    /* Bar Chart Styles */
    .bar-chart-container {
        display: flex;
        align-items: end;
        justify-content: space-around;
        height: 100%;
        padding: 20px 0;
    }

    .bar-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        flex: 1;
        max-width: 80px;
    }

    .bar-wrapper {
        position: relative;
        height: 200px;
        width: 40px;
        background: #F5F5F5;
        border-radius: 8px 8px 0 0;
        display: flex;
        align-items: end;
        margin: 10px 0;
    }

    .bar-fill {
        width: 100%;
        border-radius: 8px 8px 0 0;
        transition: height 0.8s ease;
        position: relative;
        min-height: 4px;
    }

    .bar-value {
        position: absolute;
        top: -25px;
        left: 50%;
        transform: translateX(-50%);
        font-size: 11px;
        font-weight: 600;
        color: #333;
        white-space: nowrap;
    }

    .bar-label {
        font-size: 12px;
        color: #666;
        text-align: center;
        font-weight: 500;
    }

    /* Pie Chart Styles */
    .pie-chart-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        height: 100%;
        padding: 20px;
    }

    .pie-chart {
        width: 200px;
        height: 200px;
        border-radius: 50%;
        position: relative;
    }

    .pie-legend {
        flex: 1;
        margin-left: 40px;
    }

    .legend-item {
        display: flex;
        align-items: center;
        margin-bottom: 12px;
        font-size: 14px;
    }

    .legend-color {
        width: 16px;
        height: 16px;
        border-radius: 3px;
        margin-right: 12px;
    }

    .legend-label {
        flex: 1;
        color: #333;
        font-weight: 500;
    }

    .legend-value {
        color: #666;
        font-weight: 600;
        margin-left: 8px;
    }

    /* Line Chart Styles */
    .line-chart-container {
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
    }

    .line-chart-svg {
        width: 100%;
        height: 100%;
        max-height: 250px;
    }
</style>

@code {
    [Parameter] public EnterpriseChartConfig ChartConfig { get; set; } = new();
    
    private bool _isLoading = true;
    private decimal _maxValue;

    protected override async Task OnParametersSetAsync()
    {
        if (ChartConfig != null)
        {
            _isLoading = true;
            StateHasChanged();
            
            await Task.Delay(300); // Brief delay for loading animation
            
            if (ChartConfig.Data?.Any() == true)
            {
                _maxValue = ChartConfig.Data.Max(d => d.Value);
                if (_maxValue == 0) _maxValue = 1; // Prevent division by zero
            }
            
            _isLoading = false;
            StateHasChanged();
        }
    }

    private string GetBarHeight(decimal value)
    {
        if (_maxValue == 0) return "0";
        return ((value / _maxValue) * 100).ToString("F1");
    }

    private string GetColor(int index)
    {
        var colors = new[] { "#1976D2", "#388E3C", "#F57C00", "#9C27B0", "#F44336", "#00796B", "#5D4037", "#455A64" };
        return colors[index % colors.Length];
    }

    private string GetPieGradient()
    {
        if (ChartConfig.Data?.Any() != true) return "#E0E0E0";
        
        var total = ChartConfig.Data.Sum(d => d.Value);
        if (total == 0) return "#E0E0E0"; // Prevent division by zero
        
        var segments = new List<string>();
        decimal currentPercentage = 0;
        
        foreach (var (item, index) in ChartConfig.Data.Select((d, i) => (d, i)))
        {
            var percentage = (item.Value / total) * 100;
            var color = GetColor(index);
            
            segments.Add($"{color} {currentPercentage}% {currentPercentage + percentage}%");
            currentPercentage += percentage;
        }
        
        return $"conic-gradient({string.Join(", ", segments)})";
    }

    private string GetPercentage(decimal value)
    {
        if (ChartConfig.Data?.Any() != true) return "0";
        var total = ChartConfig.Data.Sum(d => d.Value);
        if (total == 0) return "0"; // Prevent division by zero
        return ((value / total) * 100).ToString("F1");
    }

}
